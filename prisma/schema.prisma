generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("id")
  userId            String  @map("user_id")
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text @map("refresh_token")
  access_token      String? @db.Text @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String? @map("scope")
  id_token          String? @db.Text @map("id_token")
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid()) @map("id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid()) @map("id")
  name          String?   @map("name")
  email         String?   @unique @map("email")
  emailVerified DateTime? @map("email_verified")
  image         String?   @map("image")
  password      String?   @map("password")
  accounts      Account[]
  sessions      Session[]
  projects      Project[]

  @@map("user")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @unique @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("verification_token")
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC

  @@map("project_visibility")
}

enum ProjectStatus {
  DRAFT
  PROGRESS
  PENDING
  COMPLETED
  ERROR

  @@map("project_status")
}

model Project {
  id            String            @id @default(cuid()) @map("id")
  externalId    String            @unique @map("external_id")
  name          String?           @map("name")
  short_summary String?           @map("short_summary")
  long_summary  String?           @map("long_summary")
  ai_address    String?           @map("ai_address")
  ai_city       String?           @map("ai_city")
  ai_zip_code   String?           @map("ai_zip_code")
  ai_country    String?           @map("ai_country")
  visibility    ProjectVisibility @default(PRIVATE) @map("visibility")
  status        ProjectStatus     @default(DRAFT) @map("status")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  userId        String            @map("user_id")
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project")
}
